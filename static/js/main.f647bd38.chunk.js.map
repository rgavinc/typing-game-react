{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","goals","setInitialGame","_this","setState","isInputCorrect","currentGoalIdx","gameStatus","timer","input","value","focus","focusInput","startTimer","clearInterval","setInterval","Number","parseFloat","toFixed","handleInputChange","inputVal","goal","inputValLen","length","substring","this","_this2","_this$state","console","log","react_default","a","createElement","Fragment","className","type","onBlur","ref","onChange","e","target","style","color","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KC4HzBC,0NAvHbC,MAAQ,KAERC,MAAQ,CACN,gDAKFC,eAAiB,kBACfC,EAAKC,SACH,CACEC,gBAAgB,EAChBC,eAAgB,EAChBC,WAAY,WACZC,MAAO,IAET,WACEL,EAAKM,MAAMC,MAAQ,GACnBP,EAAKM,MAAME,aAwBjBC,WAAa,kBAAMT,EAAKM,MAAME,WAE9BE,WAAa,WACXC,cAAcX,EAAKK,OACnBL,EAAKK,MAAQO,YAAY,WACvBZ,EAAKC,SAAS,SAAAJ,GACZ,IAAMQ,EAAQQ,OAAOC,WAAWjB,EAAMQ,MAAQ,KAAMU,QAAQ,GACtDX,EAAeJ,EAAKH,MAApBO,WAEN,OADIC,GAAS,IAAGD,EAAa,QACtB,CACLC,QACAD,iBAGH,OAELY,kBAAoB,SAAAC,GAAQ,OAC1BjB,EAAKC,SAAS,SAAAJ,GAAS,IACfO,EAAsCP,EAAtCO,WAAYC,EAA0BR,EAA1BQ,MAAOF,EAAmBN,EAAnBM,eACrBD,GAAiB,EACF,aAAfE,IACFA,EAAa,QACbJ,EAAKU,cAEP,IAAMQ,EAAOlB,EAAKF,MAAMK,GAClBgB,EAAcF,EAASG,OAU7B,OATIH,IAAaC,EAAKG,UAAU,EAAGF,KACjCjB,GAAiB,GAEfe,IAAaC,IACfb,EAAQQ,OAAOR,GAAS,KACxBF,IACuBH,EAAKF,MAAMsB,SAAQhB,EAAa,OACvDJ,EAAKM,MAAMC,MAAQ,IAEd,CAAEL,iBAAgBC,iBAAgBC,aAAYC,+FAtDvDiB,KAAKvB,gEAgBLY,cAAcW,KAAKjB,wCAwCZ,IAAAkB,EAAAD,KAAAE,EACuDF,KAAKzB,MAA3DK,EADDsB,EACCtB,eAAgBC,EADjBqB,EACiBrB,eAAgBC,EADjCoB,EACiCpB,WAAYC,EAD7CmB,EAC6CnB,MAEpD,OADAoB,QAAQC,IAAI,CAAEtB,eAEZuB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,MACmB,UAAf1B,GAAyC,aAAfA,IAC1BuB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,SAAmB,UAAfzB,EAAyBC,EAAQ,yBACrCsB,EAAAC,EAAAC,cAAA,SACG1B,EAAiB,EADpB,IACwBmB,KAAKxB,MAAMsB,QAEnCO,EAAAC,EAAAC,cAAA,SAAIP,KAAKxB,MAAMK,IACfwB,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLC,OAAQX,KAAKb,WACbyB,IAAK,SAAA5B,GAAK,OAAKiB,EAAKjB,MAAQA,GAC5B6B,SAAU,SAAAC,GAAC,OAAIb,EAAKP,kBAAkBoB,EAAEC,OAAO9B,QAC/C+B,MAAO,CACLC,MAAOrC,EAAiB,QAAU,UAK1B,QAAfE,GACCuB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQW,QAASlB,KAAKvB,gBAAtB,eAGY,SAAfK,GACCuB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAQW,QAASlB,KAAKvB,gBAAtB,uBAhHM0C,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f647bd38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {};\n\n  goals = [\n    \"When forty winters shall besiege thy brow,\"\n    // \"And dig deep trenches in thy beauty's field,\",\n    // \"Thy youth's proud livery so gazed on now,\"\n  ];\n\n  setInitialGame = () =>\n    this.setState(\n      {\n        isInputCorrect: true,\n        currentGoalIdx: 0,\n        gameStatus: \"preStart\",\n        timer: 10.0\n      },\n      () => {\n        this.input.value = \"\";\n        this.input.focus();\n      }\n    );\n\n  componentDidMount() {\n    this.setInitialGame();\n    // fetch(\n    //   \"https://cors-anywhere.herokuapp.com/http://poetrydb.org/author,title/Shakespeare;Sonnet\",\n    //   {\n    //     headers: {\n    //       \"content-type\": \"aplication/json: charset=UTF-8\",\n    //       apiKey: \"92d0fd7ec6d55e40b386a68d8f3e5f6f\"\n    //     }\n    //   }\n    // )\n    //   .then(data => data.json())\n    //   .then(res => console.log({ res }))\n    //   .catch(err => console.log({ err }));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  focusInput = () => this.input.focus();\n\n  startTimer = () => {\n    clearInterval(this.timer);\n    this.timer = setInterval(() => {\n      this.setState(state => {\n        const timer = Number.parseFloat(state.timer - 0.01).toFixed(2);\n        let { gameStatus } = this.state;\n        if (timer <= 0) gameStatus = \"lose\";\n        return {\n          timer,\n          gameStatus\n        };\n      });\n    }, 10);\n  };\n  handleInputChange = inputVal =>\n    this.setState(state => {\n      let { gameStatus, timer, currentGoalIdx } = state;\n      let isInputCorrect = false;\n      if (gameStatus === \"preStart\") {\n        gameStatus = \"start\";\n        this.startTimer();\n      }\n      const goal = this.goals[currentGoalIdx];\n      const inputValLen = inputVal.length;\n      if (inputVal === goal.substring(0, inputValLen)) {\n        isInputCorrect = true;\n      }\n      if (inputVal === goal) {\n        timer = Number(timer) + 10;\n        currentGoalIdx++;\n        if (currentGoalIdx === this.goals.length) gameStatus = \"win\";\n        this.input.value = \"\";\n      }\n      return { isInputCorrect, currentGoalIdx, gameStatus, timer };\n    });\n  render() {\n    const { isInputCorrect, currentGoalIdx, gameStatus, timer } = this.state;\n    console.log({ gameStatus });\n    return (\n      <React.Fragment>\n        {(gameStatus === \"start\" || gameStatus === \"preStart\") && (\n          <div className=\"App\">\n            <p>{gameStatus === \"start\" ? timer : \"To begin start typing\"}</p>\n            <p>\n              {currentGoalIdx + 1}/{this.goals.length}\n            </p>\n            <p>{this.goals[currentGoalIdx]}</p>\n            <input\n              type=\"text\"\n              onBlur={this.focusInput}\n              ref={input => (this.input = input)}\n              onChange={e => this.handleInputChange(e.target.value)}\n              style={{\n                color: isInputCorrect ? \"green\" : \"red\"\n              }}\n            />\n          </div>\n        )}\n        {gameStatus === \"win\" && (\n          <React.Fragment>\n            <p>You Win!!</p>\n            <button onClick={this.setInitialGame}>Reset Game</button>\n          </React.Fragment>\n        )}\n        {gameStatus === \"lose\" && (\n          <React.Fragment>\n            <p>You Lose!!</p>\n            <button onClick={this.setInitialGame}>Reset Game</button>\n          </React.Fragment>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}